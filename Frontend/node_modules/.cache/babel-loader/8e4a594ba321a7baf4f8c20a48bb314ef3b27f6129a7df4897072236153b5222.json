{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nimport { createStore } from \"redux\";\n// 1. Auth State\nexport class AuthState {\n  constructor() {\n    this.token = null;\n    this.user = null;\n    // Take token from session storage, restore if exists:\n    this.token = sessionStorage.getItem(\"token\");\n    if (this.token) {\n      const container = jwtDecode(this.token); // { user: { id: 1, firstName: \"Moishe\", ... } }\n      this.user = container.user;\n    }\n  }\n}\n\n// 2. Auth Action Type\nexport let AuthActionType;\n\n// 3. Auth Action\n(function (AuthActionType) {\n  AuthActionType[AuthActionType[\"Register\"] = 0] = \"Register\";\n  AuthActionType[AuthActionType[\"Login\"] = 1] = \"Login\";\n  AuthActionType[AuthActionType[\"Logout\"] = 2] = \"Logout\";\n})(AuthActionType || (AuthActionType = {}));\n// 4. Auth Reducer\nexport function authReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // Duplicate current state: \n  const newState = {\n    ...currentState\n  };\n\n  // Perform the needed operation: \n  switch (action.type) {\n    case AuthActionType.Register: // Here the payload is the token (string).\n    case AuthActionType.Login:\n      // Here the payload is the token (string).\n      newState.token = action.payload;\n      const container = jwtDecode(newState.token); // { user: { id: 1, firstName: \"Moishe\", ... } }\n      newState.user = container.user;\n      sessionStorage.setItem(\"token\", newState.token);\n      break;\n    case AuthActionType.Logout:\n      newState.token = null;\n      newState.user = null;\n      sessionStorage.removeItem(\"token\");\n      break;\n  }\n\n  // Return the new state: \n  return newState;\n}\n\n// 5. Auth Store\nexport const authStore = createStore(authReducer);","map":{"version":3,"names":["jwtDecode","createStore","AuthState","constructor","token","user","sessionStorage","getItem","container","AuthActionType","authReducer","currentState","action","newState","type","Register","Login","payload","setItem","Logout","removeItem","authStore"],"sources":["/Users/raniradzewsky/Library/Mobile Documents/com~apple~CloudDocs/Documents/school/John Bryce/Teach's Docs/2022-11-08 - REST API using MySQL, Full Stack System, SCSS/02 - Northwind Full Stack System/Frontend/src/Redux/AuthState.ts"],"sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport { createStore } from \"redux\";\r\nimport UserModel from \"../Models/UserModel\";\r\n\r\n// 1. Auth State\r\nexport class AuthState {\r\n    \r\n    public token: string = null;\r\n    public user: UserModel = null;\r\n\r\n    public constructor() {\r\n\r\n        // Take token from session storage, restore if exists:\r\n        this.token = sessionStorage.getItem(\"token\");\r\n        if(this.token) {\r\n            const container: { user: UserModel } = jwtDecode(this.token); // { user: { id: 1, firstName: \"Moishe\", ... } }\r\n            this.user = container.user;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// 2. Auth Action Type\r\nexport enum AuthActionType {\r\n    Register,\r\n    Login,\r\n    Logout\r\n}\r\n\r\n// 3. Auth Action\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: string; // string because of the token, optional because logout needs no payload.\r\n}\r\n\r\n// 4. Auth Reducer\r\nexport function authReducer(currentState = new AuthState(), action: AuthAction): AuthState {\r\n\r\n    // Duplicate current state: \r\n    const newState = { ...currentState };\r\n\r\n    // Perform the needed operation: \r\n    switch (action.type) {\r\n\r\n        case AuthActionType.Register: // Here the payload is the token (string).\r\n        case AuthActionType.Login: // Here the payload is the token (string).\r\n            newState.token = action.payload;\r\n            const container: { user: UserModel } = jwtDecode(newState.token); // { user: { id: 1, firstName: \"Moishe\", ... } }\r\n            newState.user = container.user;\r\n            sessionStorage.setItem(\"token\", newState.token);\r\n            break;\r\n\r\n        case AuthActionType.Logout:\r\n            newState.token = null;\r\n            newState.user = null;\r\n            sessionStorage.removeItem(\"token\");\r\n            break;\r\n    }\r\n\r\n    // Return the new state: \r\n    return newState;\r\n}\r\n\r\n\r\n// 5. Auth Store\r\nexport const authStore = createStore(authReducer);\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,SAASC,WAAW,QAAQ,OAAO;AAGnC;AACA,OAAO,MAAMC,SAAS,CAAC;EAKZC,WAAW,GAAG;IAAA,KAHdC,KAAK,GAAW,IAAI;IAAA,KACpBC,IAAI,GAAc,IAAI;IAIzB;IACA,IAAI,CAACD,KAAK,GAAGE,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC5C,IAAG,IAAI,CAACH,KAAK,EAAE;MACX,MAAMI,SAA8B,GAAGR,SAAS,CAAC,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;MAC9D,IAAI,CAACC,IAAI,GAAGG,SAAS,CAACH,IAAI;IAC9B;EACJ;AAEJ;;AAEA;AACA,WAAYI,cAAc;;AAM1B;AAAA,WANYA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;AAAA,GAAdA,cAAc,KAAdA,cAAc;AAY1B;AACA,OAAO,SAASC,WAAW,GAAgE;EAAA,IAA/DC,YAAY,uEAAG,IAAIT,SAAS,EAAE;EAAA,IAAEU,MAAkB;EAE1E;EACA,MAAMC,QAAQ,GAAG;IAAE,GAAGF;EAAa,CAAC;;EAEpC;EACA,QAAQC,MAAM,CAACE,IAAI;IAEf,KAAKL,cAAc,CAACM,QAAQ,CAAC,CAAC;IAC9B,KAAKN,cAAc,CAACO,KAAK;MAAE;MACvBH,QAAQ,CAACT,KAAK,GAAGQ,MAAM,CAACK,OAAO;MAC/B,MAAMT,SAA8B,GAAGR,SAAS,CAACa,QAAQ,CAACT,KAAK,CAAC,CAAC,CAAC;MAClES,QAAQ,CAACR,IAAI,GAAGG,SAAS,CAACH,IAAI;MAC9BC,cAAc,CAACY,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACT,KAAK,CAAC;MAC/C;IAEJ,KAAKK,cAAc,CAACU,MAAM;MACtBN,QAAQ,CAACT,KAAK,GAAG,IAAI;MACrBS,QAAQ,CAACR,IAAI,GAAG,IAAI;MACpBC,cAAc,CAACc,UAAU,CAAC,OAAO,CAAC;MAClC;EAAM;;EAGd;EACA,OAAOP,QAAQ;AACnB;;AAGA;AACA,OAAO,MAAMQ,SAAS,GAAGpB,WAAW,CAACS,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}