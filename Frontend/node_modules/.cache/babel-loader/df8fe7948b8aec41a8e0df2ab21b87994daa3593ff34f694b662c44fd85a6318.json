{"ast":null,"code":"import axios from \"axios\";\nimport { FollowersActionType, followersStore } from \"../Redux/FollowerswState\";\nimport { VacationsActionType, vacationsStore } from \"../Redux/VacationsState\";\nimport appConfig from \"../Utils/Config\";\nimport authService from \"./AuthService\";\n// import { v4 as uuid } from \"uuid\";\n\nclass VacationsService {\n  // Get all vacations + likes:\n  async getAllVacationsWithLikes() {\n    let vacations = vacationsStore.getState().vacations;\n    const currentUserId = await authService.getUserIdFromToken();\n    if (vacations.length === 0) {\n      const response = await axios.get(appConfig.likedVacationsUrl + currentUserId); // AJAX\n      vacations = response.data;\n      vacationsStore.dispatch({\n        type: VacationsActionType.FetchVacations,\n        payload: vacations\n      });\n    }\n    return vacations;\n  }\n\n  // Get one vacation:\n  async getOneVacation(vacationId) {\n    // let vacations = vacationsStore.getState().vacations;\n    // let vacation = vacations.find(v => v.vacationId === vacationId);\n\n    // if (!vacation) {\n\n    const response = await axios.get(appConfig.vacationsUrl + vacationId);\n    const vacation = response.data;\n    // }\n\n    return vacation;\n  }\n\n  // Add vacation: \n  async addVacation(vacation) {\n    const myFormData = new FormData(); // Can contain strings and / or files.\n    myFormData.append(\"destination\", vacation.destination);\n    myFormData.append(\"description\", vacation.description);\n    myFormData.append(\"startDate\", vacation.startDate);\n    myFormData.append(\"endDate\", vacation.endDate);\n    myFormData.append(\"price\", vacation.price.toString());\n    myFormData.append(\"image\", vacation.image[0]);\n    myFormData.append(\"imageName\", vacation.imageName);\n    const response = await axios.post(appConfig.vacationsUrl, myFormData);\n    const addedVacation = response.data;\n    vacationsStore.dispatch({\n      type: VacationsActionType.AddVacation,\n      payload: addedVacation\n    });\n  }\n\n  // Update Vacation: \n  async updateVacation(vacation) {\n    if (!vacation.image) {\n      vacation.image = import(`../Assets/Images/` + vacation.ima);\n    }\n    const myFormData = new FormData(); // Can contain strings and / or files.\n    myFormData.append(\"destination\", vacation.destination);\n    myFormData.append(\"description\", vacation.description);\n    myFormData.append(\"startDate\", vacation.startDate);\n    myFormData.append(\"endDate\", vacation.endDate);\n    myFormData.append(\"price\", vacation.price.toString());\n    myFormData.append(\"image\", vacation.image[0]);\n    myFormData.append(\"imageName\", vacation.imageName);\n    const response = await axios.put(appConfig.vacationsUrl + vacation.vacationId, myFormData); // Sending object without files.\n    const updatedVacation = response.data;\n    vacationsStore.dispatch({\n      type: VacationsActionType.UpdateVacation,\n      payload: updatedVacation\n    });\n  }\n\n  // Delete Vacation: \n  async deleteVacation(id) {\n    // let vacations = vacationsStore.getState().vacations;\n    // let vacation = vacations.find(v => v.vacationId === id);\n\n    // // if (fs.existsSync(\"./src/1-assets/images/\" + vacation.imageName)) {\n    //     // fs.unlinkSync(\"./src/1-assets/images/\" + vacation.imageName);\n    // // }\n\n    await axios.delete(appConfig.vacationsUrl + id);\n    vacationsStore.dispatch({\n      type: VacationsActionType.DeleteVacation,\n      payload: id\n    });\n  }\n\n  // Get all followers:\n  async getAllFollowers() {\n    let followers = followersStore.getState().followers;\n    if (followers.length === 0) {\n      const response = await axios.get(appConfig.likedVacationsUrl); // AJAX\n      followers = response.data;\n      followersStore.dispatch({\n        type: FollowersActionType.FetchFollowers,\n        payload: followers\n      });\n    }\n    return followers;\n  }\n\n  //Add follower:\n  async addFollower(follower) {\n    const response = await axios.post(appConfig.likedVacationsUrl, follower);\n    const addedFollower = response.data;\n    followersStore.dispatch({\n      type: FollowersActionType.AddFollower,\n      payload: addedFollower\n    });\n  }\n\n  //Delete follower:\n  async deleteFollower(follower) {\n    await axios.delete(appConfig.likedVacationsUrl + follower.vacationId + \"/\" + follower.userId);\n    followersStore.dispatch({\n      type: FollowersActionType.DeleteFollower,\n      payload: follower\n    });\n  }\n}\nconst vacationsService = new VacationsService();\nexport default vacationsService;","map":{"version":3,"names":["axios","FollowersActionType","followersStore","VacationsActionType","vacationsStore","appConfig","authService","VacationsService","getAllVacationsWithLikes","vacations","getState","currentUserId","getUserIdFromToken","length","response","get","likedVacationsUrl","data","dispatch","type","FetchVacations","payload","getOneVacation","vacationId","vacationsUrl","vacation","addVacation","myFormData","FormData","append","destination","description","startDate","endDate","price","toString","image","imageName","post","addedVacation","AddVacation","updateVacation","ima","put","updatedVacation","UpdateVacation","deleteVacation","id","delete","DeleteVacation","getAllFollowers","followers","FetchFollowers","addFollower","follower","addedFollower","AddFollower","deleteFollower","userId","DeleteFollower","vacationsService"],"sources":["/Users/raniradzewsky/Library/Mobile Documents/com~apple~CloudDocs/Documents/school/John Bryce/John Bryce Projects/Project 3/Vacations Project 5.0/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { idText } from \"typescript\";\r\nimport FollowerModel from \"../Models/FollowerModel\";\r\n// import fs from \"fs\";\r\nimport VacationModel from \"../Models/VacationModel\";\r\nimport { authStore } from \"../Redux/AuthState\";\r\nimport { FollowersActionType, followersStore } from \"../Redux/FollowerswState\";\r\nimport { VacationsActionType, vacationsStore } from \"../Redux/VacationsState\";\r\nimport appConfig from \"../Utils/Config\";\r\nimport authService from \"./AuthService\";\r\nimport notifyService from \"./NotifyService\";\r\n// import { v4 as uuid } from \"uuid\";\r\n\r\nclass VacationsService {\r\n\r\n    // Get all vacations + likes:\r\n    public async getAllVacationsWithLikes(): Promise<VacationModel[]> {\r\n\r\n        let vacations = vacationsStore.getState().vacations;\r\n        const currentUserId:number = await authService.getUserIdFromToken()\r\n\r\n        if (vacations.length === 0) {\r\n\r\n            const response = await axios.get<VacationModel[]>(appConfig.likedVacationsUrl+currentUserId); // AJAX\r\n            vacations = response.data;\r\n            vacationsStore.dispatch({ type: VacationsActionType.FetchVacations, payload: vacations });\r\n        }\r\n\r\n        return vacations;\r\n    }\r\n\r\n    // Get one vacation:\r\n    public async getOneVacation(vacationId: number): Promise<VacationModel> {\r\n\r\n        // let vacations = vacationsStore.getState().vacations;\r\n        // let vacation = vacations.find(v => v.vacationId === vacationId);\r\n\r\n        // if (!vacation) {\r\n\r\n            const response = await axios.get<VacationModel>(appConfig.vacationsUrl + vacationId); \r\n            const vacation = response.data;\r\n        // }\r\n\r\n        return vacation;\r\n    }\r\n\r\n    // Add vacation: \r\n    public async addVacation(vacation: VacationModel): Promise<void> { \r\n        \r\n        const myFormData = new FormData(); // Can contain strings and / or files.\r\n        myFormData.append(\"destination\", vacation.destination);\r\n        myFormData.append(\"description\", vacation.description);\r\n        myFormData.append(\"startDate\", vacation.startDate);\r\n        myFormData.append(\"endDate\", vacation.endDate);\r\n        myFormData.append(\"price\", vacation.price.toString());\r\n        myFormData.append(\"image\", vacation.image[0]);\r\n        myFormData.append(\"imageName\", vacation.imageName);\r\n\r\n\r\n        const response = await axios.post<VacationModel>(appConfig.vacationsUrl, myFormData);\r\n        const addedVacation = response.data;\r\n        vacationsStore.dispatch({ type: VacationsActionType.AddVacation, payload: addedVacation });\r\n    }\r\n\r\n    // Update Vacation: \r\n    public async updateVacation(vacation: VacationModel): Promise<void> {\r\n        if (!vacation.image) {\r\n            vacation.image = import(`../Assets/Images/`+ vacation.ima)\r\n          }\r\n    \r\n            const myFormData = new FormData(); // Can contain strings and / or files.\r\n            myFormData.append(\"destination\", vacation.destination);\r\n            myFormData.append(\"description\", vacation.description);\r\n            myFormData.append(\"startDate\", vacation.startDate);\r\n            myFormData.append(\"endDate\", vacation.endDate);\r\n            myFormData.append(\"price\", vacation.price.toString());\r\n            myFormData.append(\"image\", vacation.image[0]);\r\n            myFormData.append(\"imageName\", vacation.imageName);\r\n    \r\n\r\n        const response = await axios.put<VacationModel>(appConfig.vacationsUrl + vacation.vacationId, myFormData); // Sending object without files.\r\n        const updatedVacation = response.data;\r\n        vacationsStore.dispatch({ type: VacationsActionType.UpdateVacation, payload: updatedVacation });\r\n    }\r\n\r\n    // Delete Vacation: \r\n    public async deleteVacation(id: number): Promise<void> {\r\n\r\n        // let vacations = vacationsStore.getState().vacations;\r\n        // let vacation = vacations.find(v => v.vacationId === id);\r\n\r\n        // // if (fs.existsSync(\"./src/1-assets/images/\" + vacation.imageName)) {\r\n        //     // fs.unlinkSync(\"./src/1-assets/images/\" + vacation.imageName);\r\n        // // }\r\n\r\n        await axios.delete<void>(appConfig.vacationsUrl + id);\r\n\r\n        vacationsStore.dispatch({ type: VacationsActionType.DeleteVacation, payload: id });\r\n\r\n    }\r\n\r\n    // Get all followers:\r\n    public async getAllFollowers(): Promise<FollowerModel[]> {\r\n\r\n        let followers = followersStore.getState().followers;\r\n\r\n        if (followers.length === 0) {\r\n\r\n            const response = await axios.get<FollowerModel[]>(appConfig.likedVacationsUrl); // AJAX\r\n            followers = response.data;\r\n            followersStore.dispatch({ type: FollowersActionType.FetchFollowers, payload: followers });\r\n        }\r\n\r\n        return followers;\r\n    }\r\n\r\n    //Add follower:\r\n    public async addFollower(follower: FollowerModel): Promise<void> { \r\n        \r\n        const response = await axios.post<FollowerModel>(appConfig.likedVacationsUrl, follower);\r\n\r\n        const addedFollower = response.data;\r\n\r\n        followersStore.dispatch({ type: FollowersActionType.AddFollower, payload: addedFollower });\r\n    }\r\n\r\n\r\n    //Delete follower:\r\n    public async deleteFollower(follower: FollowerModel): Promise<void> {\r\n\r\n         await axios.delete<void>(appConfig.likedVacationsUrl + follower.vacationId+\"/\"+follower.userId);\r\n\r\n        followersStore.dispatch({ type: FollowersActionType.DeleteFollower, payload: follower });\r\n        \r\n\r\n    }\r\n}\r\n\r\nconst vacationsService = new VacationsService();\r\n\r\nexport default vacationsService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}