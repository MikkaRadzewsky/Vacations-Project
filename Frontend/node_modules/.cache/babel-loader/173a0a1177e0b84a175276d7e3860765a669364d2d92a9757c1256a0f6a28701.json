{"ast":null,"code":"// Global State for all Products\n\nimport { createStore } from \"redux\";\n// 1. Global State - the global data:\nexport class ProductsState {\n  constructor() {\n    this.products = [];\n  }\n}\n\n// 2. Action Type - a list of operations we can perform on the data:\nexport let ProductsActionType;\n\n// 3. Action - A single object which dispatch sends to Redux for some change:\n(function (ProductsActionType) {\n  ProductsActionType[\"FetchProducts\"] = \"FetchProducts\";\n  ProductsActionType[\"AddProduct\"] = \"AddProduct\";\n  ProductsActionType[\"UpdateProduct\"] = \"UpdateProduct\";\n  ProductsActionType[\"DeleteProduct\"] = \"DeleteProduct\";\n})(ProductsActionType || (ProductsActionType = {}));\n// 4. Reducer - a function which will be invoked when calling dispatch to perform the operation\nexport function productsReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ProductsState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...currentState\n  };\n  switch (action.type) {\n    case ProductsActionType.FetchProducts:\n      // Here the payload is a list of products (ProductModel[])\n      newState.products = action.payload;\n      break;\n    case ProductsActionType.AddProduct:\n      // Here the payload is a product to add (ProductModel)\n      newState.products.push(action.payload);\n      break;\n    case ProductsActionType.UpdateProduct:\n      // Here the payload is a product to update (ProductModel)\n      const indexToUpdate = newState.products.findIndex(p => p.id === action.payload.id);\n      if (indexToUpdate >= 0) {\n        newState.products[indexToUpdate] = action.payload;\n      }\n      break;\n    case ProductsActionType.DeleteProduct:\n      // Here the payload is the id of the product to delete (number)\n      const indexToDelete = newState.products.findIndex(p => p.id === action.payload);\n      if (indexToDelete >= 0) {\n        newState.products.splice(indexToDelete, 1);\n      }\n      break;\n  }\n  return newState;\n}\n\n// 5. Store - manager object from Redux library which handles the entire operation:\n// export const productsStore = createStore(productsReducer, composeWithDevTools()); // Development\nexport const productsStore = createStore(productsReducer); // Production","map":{"version":3,"names":["createStore","ProductsState","products","ProductsActionType","productsReducer","currentState","action","newState","type","FetchProducts","payload","AddProduct","push","UpdateProduct","indexToUpdate","findIndex","p","id","DeleteProduct","indexToDelete","splice","productsStore"],"sources":["/Users/raniradzewsky/Library/Mobile Documents/com~apple~CloudDocs/Documents/school/John Bryce/Teach's Docs/2022-11-08 - REST API using MySQL, Full Stack System, SCSS/02 - Northwind Full Stack System/Frontend/src/Redux/ProductsState.ts"],"sourcesContent":["// Global State for all Products\r\n\r\nimport { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport ProductModel from \"../Models/ProductModel\";\r\n\r\n// 1. Global State - the global data:\r\nexport class ProductsState {\r\n    public products: ProductModel[] = [];\r\n}\r\n\r\n// 2. Action Type - a list of operations we can perform on the data:\r\nexport enum ProductsActionType {\r\n    FetchProducts = \"FetchProducts\",\r\n    AddProduct = \"AddProduct\",\r\n    UpdateProduct = \"UpdateProduct\",\r\n    DeleteProduct = \"DeleteProduct\"\r\n}\r\n\r\n// 3. Action - A single object which dispatch sends to Redux for some change:\r\nexport interface ProductsAction {\r\n    type: ProductsActionType;\r\n    payload: any;\r\n}\r\n\r\n// 4. Reducer - a function which will be invoked when calling dispatch to perform the operation\r\nexport function productsReducer(currentState = new ProductsState(), action: ProductsAction): ProductsState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n\r\n        case ProductsActionType.FetchProducts: // Here the payload is a list of products (ProductModel[])\r\n            newState.products = action.payload;\r\n            break;\r\n\r\n        case ProductsActionType.AddProduct: // Here the payload is a product to add (ProductModel)\r\n            newState.products.push(action.payload);\r\n            break;\r\n\r\n        case ProductsActionType.UpdateProduct: // Here the payload is a product to update (ProductModel)\r\n            const indexToUpdate = newState.products.findIndex(p => p.id === action.payload.id);\r\n            if(indexToUpdate >= 0) {\r\n                newState.products[indexToUpdate] = action.payload;\r\n            }\r\n            break;\r\n\r\n        case ProductsActionType.DeleteProduct: // Here the payload is the id of the product to delete (number)\r\n            const indexToDelete = newState.products.findIndex(p => p.id === action.payload);\r\n            if(indexToDelete >= 0) {\r\n                newState.products.splice(indexToDelete, 1);\r\n            }\r\n            break;\r\n\r\n    }\r\n\r\n    return newState;\r\n}\r\n\r\n// 5. Store - manager object from Redux library which handles the entire operation:\r\n// export const productsStore = createStore(productsReducer, composeWithDevTools()); // Development\r\nexport const productsStore = createStore(productsReducer); // Production\r\n"],"mappings":"AAAA;;AAEA,SAASA,WAAW,QAAQ,OAAO;AAInC;AACA,OAAO,MAAMC,aAAa,CAAC;EAAA;IAAA,KAChBC,QAAQ,GAAmB,EAAE;EAAA;AACxC;;AAEA;AACA,WAAYC,kBAAkB;;AAO9B;AAAA,WAPYA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;AAAA,GAAlBA,kBAAkB,KAAlBA,kBAAkB;AAa9B;AACA,OAAO,SAASC,eAAe,GAA4E;EAAA,IAA3EC,YAAY,uEAAG,IAAIJ,aAAa,EAAE;EAAA,IAAEK,MAAsB;EAEtF,MAAMC,QAAQ,GAAG;IAAE,GAAGF;EAAa,CAAC;EAEpC,QAAQC,MAAM,CAACE,IAAI;IAEf,KAAKL,kBAAkB,CAACM,aAAa;MAAE;MACnCF,QAAQ,CAACL,QAAQ,GAAGI,MAAM,CAACI,OAAO;MAClC;IAEJ,KAAKP,kBAAkB,CAACQ,UAAU;MAAE;MAChCJ,QAAQ,CAACL,QAAQ,CAACU,IAAI,CAACN,MAAM,CAACI,OAAO,CAAC;MACtC;IAEJ,KAAKP,kBAAkB,CAACU,aAAa;MAAE;MACnC,MAAMC,aAAa,GAAGP,QAAQ,CAACL,QAAQ,CAACa,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKX,MAAM,CAACI,OAAO,CAACO,EAAE,CAAC;MAClF,IAAGH,aAAa,IAAI,CAAC,EAAE;QACnBP,QAAQ,CAACL,QAAQ,CAACY,aAAa,CAAC,GAAGR,MAAM,CAACI,OAAO;MACrD;MACA;IAEJ,KAAKP,kBAAkB,CAACe,aAAa;MAAE;MACnC,MAAMC,aAAa,GAAGZ,QAAQ,CAACL,QAAQ,CAACa,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKX,MAAM,CAACI,OAAO,CAAC;MAC/E,IAAGS,aAAa,IAAI,CAAC,EAAE;QACnBZ,QAAQ,CAACL,QAAQ,CAACkB,MAAM,CAACD,aAAa,EAAE,CAAC,CAAC;MAC9C;MACA;EAAM;EAId,OAAOZ,QAAQ;AACnB;;AAEA;AACA;AACA,OAAO,MAAMc,aAAa,GAAGrB,WAAW,CAACI,eAAe,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}