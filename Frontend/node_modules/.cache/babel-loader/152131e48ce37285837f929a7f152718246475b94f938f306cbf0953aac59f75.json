{"ast":null,"code":"import axios from \"axios\";\nimport { ProductsActionType, productsStore } from \"../Redux/ProductsState\";\nimport appConfig from \"../Utils/Config\";\nclass ProductsService {\n  // Get all products:\n  async getAllProducts() {\n    // Take products from global store:\n    let products = productsStore.getState().products;\n    if (products.length === 0) {\n      // AJAX Request: \n      const response = await axios.get(appConfig.productsUrl); // AJAX\n\n      // Extract products: \n      products = response.data;\n\n      // Save products to global state: \n      productsStore.dispatch({\n        type: ProductsActionType.FetchProducts,\n        payload: products\n      });\n    }\n\n    // Return products:\n    return products;\n  }\n\n  // Get one product:\n  async getOneProduct(id) {\n    // Take products from global store:\n    let products = productsStore.getState().products;\n\n    // Find required product:\n    let product = products.find(p => p.id === id);\n\n    // If we don't have that product in global state:\n    if (!product) {\n      // AJAX Request: \n      const response = await axios.get(appConfig.productsUrl + id);\n\n      // Extract product: \n      product = response.data;\n    }\n\n    // Return product: \n    return product;\n  }\n\n  // REST API Methods:\n  // GET      Get data from server\n  // POST     Add new data to server\n  // PUT      Update full data in server - sending all properties\n  // PATCH    Update partial data in server - sending some properties\n  // DELETE   Delete data in server\n\n  // Add product: \n  async addProduct(product) {\n    // AJAX Request - Sending a new product to add, receiving back the added product - after adding to the database:\n\n    // const response = await axios.post<ProductModel>(appConfig.productsUrl, product); // Sending object without files.\n\n    const myFormData = new FormData(); // Can contain strings and / or files.\n    myFormData.append(\"name\", product.name);\n    myFormData.append(\"price\", product.price.toString());\n    myFormData.append(\"stock\", product.stock.toString());\n    myFormData.append(\"image\", product.image[0]); // image = FileList, image[0] = File\n\n    // Sending object with file (the image):\n    const response = await axios.post(appConfig.productsUrl, myFormData); // Sending object without files.\n\n    // Extract the added product: \n    const addedProduct = response.data;\n\n    // Add the added product to the global state:\n    productsStore.dispatch({\n      type: ProductsActionType.AddProduct,\n      payload: addedProduct\n    });\n  }\n\n  // Update product: \n  async updateProduct(product) {\n    const myFormData = new FormData(); // Can contain strings and / or files.\n    myFormData.append(\"name\", product.name);\n    myFormData.append(\"price\", product.price.toString());\n    myFormData.append(\"stock\", product.stock.toString());\n    myFormData.append(\"image\", product.image[0]); // image = FileList, image[0] = File\n\n    // Sending object with file (the image):\n    const response = await axios.put(appConfig.productsUrl + product.id, myFormData); // Sending object without files.\n\n    // Extract the updated product: \n    const updatedProduct = response.data;\n\n    // Update that product in the global store:\n    productsStore.dispatch({\n      type: ProductsActionType.UpdateProduct,\n      payload: updatedProduct\n    });\n  }\n\n  // Delete product: \n  async deleteProduct(id) {\n    // Delete in backend:\n    await axios.delete(appConfig.productsUrl + id);\n\n    // Delete in global state: \n    productsStore.dispatch({\n      type: ProductsActionType.DeleteProduct,\n      payload: id\n    });\n  }\n\n  // Get all categories:\n  async getAllCategories() {\n    // Send JWT header in specific request (not a good practice)\n\n    // const headers = { authorization: \"Bearer \" + authStore.getState().token };\n    // const response = await axios.get<CategoryModel[]>(appConfig.categoriesUrl, { headers });\n\n    const response = await axios.get(appConfig.categoriesUrl);\n    const categories = response.data;\n    return categories;\n  }\n}\nconst productsService = new ProductsService();\nexport default productsService;","map":{"version":3,"names":["axios","ProductsActionType","productsStore","appConfig","ProductsService","getAllProducts","products","getState","length","response","get","productsUrl","data","dispatch","type","FetchProducts","payload","getOneProduct","id","product","find","p","addProduct","myFormData","FormData","append","name","price","toString","stock","image","post","addedProduct","AddProduct","updateProduct","put","updatedProduct","UpdateProduct","deleteProduct","delete","DeleteProduct","getAllCategories","categoriesUrl","categories","productsService"],"sources":["/Users/raniradzewsky/Library/Mobile Documents/com~apple~CloudDocs/Documents/school/John Bryce/Teach's Docs/2022-11-08 - REST API using MySQL, Full Stack System, SCSS/02 - Northwind Full Stack System/Frontend/src/Services/ProductsService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport CategoryModel from \"../Models/CategoryModel\";\r\nimport ProductModel from \"../Models/ProductModel\";\r\nimport { authStore } from \"../Redux/AuthState\";\r\nimport { ProductsActionType, productsStore } from \"../Redux/ProductsState\";\r\nimport appConfig from \"../Utils/Config\";\r\n\r\nclass ProductsService {\r\n\r\n    // Get all products:\r\n    public async getAllProducts(): Promise<ProductModel[]> {\r\n\r\n        // Take products from global store:\r\n        let products = productsStore.getState().products;\r\n\r\n        if (products.length === 0) {\r\n\r\n            // AJAX Request: \r\n            const response = await axios.get<ProductModel[]>(appConfig.productsUrl); // AJAX\r\n\r\n            // Extract products: \r\n            products = response.data;\r\n\r\n            // Save products to global state: \r\n            productsStore.dispatch({ type: ProductsActionType.FetchProducts, payload: products });\r\n        }\r\n\r\n        // Return products:\r\n        return products;\r\n    }\r\n\r\n    // Get one product:\r\n    public async getOneProduct(id: number): Promise<ProductModel> {\r\n\r\n        // Take products from global store:\r\n        let products = productsStore.getState().products;\r\n\r\n        // Find required product:\r\n        let product = products.find(p => p.id === id);\r\n\r\n        // If we don't have that product in global state:\r\n        if (!product) {\r\n\r\n            // AJAX Request: \r\n            const response = await axios.get<ProductModel>(appConfig.productsUrl + id);\r\n\r\n            // Extract product: \r\n            product = response.data;\r\n        }\r\n\r\n        // Return product: \r\n        return product;\r\n    }\r\n\r\n    // REST API Methods:\r\n    // GET      Get data from server\r\n    // POST     Add new data to server\r\n    // PUT      Update full data in server - sending all properties\r\n    // PATCH    Update partial data in server - sending some properties\r\n    // DELETE   Delete data in server\r\n\r\n    // Add product: \r\n    public async addProduct(product: ProductModel): Promise<void> {\r\n\r\n        // AJAX Request - Sending a new product to add, receiving back the added product - after adding to the database:\r\n\r\n        // const response = await axios.post<ProductModel>(appConfig.productsUrl, product); // Sending object without files.\r\n\r\n        const myFormData = new FormData(); // Can contain strings and / or files.\r\n        myFormData.append(\"name\", product.name);\r\n        myFormData.append(\"price\", product.price.toString());\r\n        myFormData.append(\"stock\", product.stock.toString());\r\n        myFormData.append(\"image\", product.image[0]); // image = FileList, image[0] = File\r\n\r\n        // Sending object with file (the image):\r\n        const response = await axios.post<ProductModel>(appConfig.productsUrl, myFormData); // Sending object without files.\r\n\r\n        // Extract the added product: \r\n        const addedProduct = response.data;\r\n\r\n        // Add the added product to the global state:\r\n        productsStore.dispatch({ type: ProductsActionType.AddProduct, payload: addedProduct });\r\n    }\r\n\r\n    // Update product: \r\n    public async updateProduct(product: ProductModel): Promise<void> {\r\n\r\n        const myFormData = new FormData(); // Can contain strings and / or files.\r\n        myFormData.append(\"name\", product.name);\r\n        myFormData.append(\"price\", product.price.toString());\r\n        myFormData.append(\"stock\", product.stock.toString());\r\n        myFormData.append(\"image\", product.image[0]); // image = FileList, image[0] = File\r\n\r\n        // Sending object with file (the image):\r\n        const response = await axios.put<ProductModel>(appConfig.productsUrl + product.id, myFormData); // Sending object without files.\r\n\r\n        // Extract the updated product: \r\n        const updatedProduct = response.data;\r\n\r\n        // Update that product in the global store:\r\n        productsStore.dispatch({ type: ProductsActionType.UpdateProduct, payload: updatedProduct });\r\n    }\r\n\r\n    // Delete product: \r\n    public async deleteProduct(id: number): Promise<void> {\r\n\r\n        // Delete in backend:\r\n        await axios.delete<void>(appConfig.productsUrl + id);\r\n\r\n        // Delete in global state: \r\n        productsStore.dispatch({ type: ProductsActionType.DeleteProduct, payload: id });\r\n\r\n    }\r\n\r\n    // Get all categories:\r\n    public async getAllCategories(): Promise<CategoryModel[]> {\r\n        \r\n        // Send JWT header in specific request (not a good practice)\r\n        \r\n        // const headers = { authorization: \"Bearer \" + authStore.getState().token };\r\n        // const response = await axios.get<CategoryModel[]>(appConfig.categoriesUrl, { headers });\r\n        \r\n        const response = await axios.get<CategoryModel[]>(appConfig.categoriesUrl);\r\n        const categories = response.data;\r\n        return categories;\r\n    }\r\n\r\n}\r\n\r\nconst productsService = new ProductsService();\r\n\r\nexport default productsService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}