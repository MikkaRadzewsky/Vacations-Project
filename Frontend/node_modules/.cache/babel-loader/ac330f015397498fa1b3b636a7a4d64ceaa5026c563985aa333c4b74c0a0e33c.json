{"ast":null,"code":"// Global State for all vacations\n\nimport { createStore } from \"redux\";\n// 1. Global State - the global data:\nexport class VacationsState {\n  constructor() {\n    this.vacations = [];\n  }\n}\n\n// 2. Action Type - a list of operations we can perform on the data:\nexport let VacationsActionType;\n\n// 3. Action - A single object which dispatch sends to Redux for some change:\n(function (VacationsActionType) {\n  VacationsActionType[\"FetchVacations\"] = \"FetchVacations\";\n  VacationsActionType[\"AddVacation\"] = \"AddVacation\";\n  VacationsActionType[\"UpdateVacation\"] = \"UpdateVacation\";\n  VacationsActionType[\"DeleteVacation\"] = \"DeleteVacation\";\n  VacationsActionType[\"EmptyStore\"] = \"EmptyStore\";\n  VacationsActionType[\"AddFollower\"] = \"AddFollower\";\n  VacationsActionType[\"DeleteFollower\"] = \"DeleteFollower\";\n  VacationsActionType[\"isNowFollowing\"] = \"isNowFollowing\";\n  VacationsActionType[\"isNotFollowing\"] = \"isNotFollowing\";\n})(VacationsActionType || (VacationsActionType = {}));\n// 4. Reducer - a function which will be invoked when calling dispatch to perform the operation\nexport function vacationsReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new VacationsState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...currentState\n  };\n  switch (action.type) {\n    case VacationsActionType.FetchVacations:\n      // Here the payload is a list of vacations (vacationModel[])\n      newState.vacations = action.payload;\n      break;\n    case VacationsActionType.AddVacation:\n      // Here the payload is a vacation to add (vacationModel)\n      newState.vacations.push(action.payload);\n      break;\n    case VacationsActionType.UpdateVacation:\n      // Here the payload is a vacation to update (vacationModel)\n      const indexToUpdate = newState.vacations.findIndex(v => v.vacationId === action.payload.id);\n      if (indexToUpdate >= 0) {\n        newState.vacations[indexToUpdate] = action.payload;\n      }\n      break;\n    case VacationsActionType.DeleteVacation:\n      // Here the payload is the id of the vacation to delete (number)\n      const indexToDelete = newState.vacations.findIndex(v => v.vacationId === action.payload);\n      if (indexToDelete >= 0) {\n        newState.vacations.splice(indexToDelete, 1);\n      }\n      break;\n    case VacationsActionType.EmptyStore:\n      newState.vacations = action.payload;\n      break;\n    case VacationsActionType.AddFollower:\n      const addFollowerIndex = newState.vacations.findIndex(v => v.vacationId === action.payload.vacationId);\n      newState.vacations[addFollowerIndex].followersCount++;\n      break;\n    case VacationsActionType.DeleteFollower:\n      const deleteFollowerIndex = newState.vacations.findIndex(v => v.vacationId === action.payload.vacationId);\n      newState.vacations[deleteFollowerIndex].followersCount--;\n      break;\n\n    // case VacationsActionType.isNowFollowing:\n    //     const addFollowIndex = newState.vacations.findIndex(v => v.vacationId === action.payload);\n    //     newState.vacations[addFollowIndex].isFollowing=1;\n    //     break;\n\n    // case VacationsActionType.isNotFollowing:\n    //     const deleteFollowIndex = newState.vacations.findIndex(v => v.vacationId === action.payload);\n    //     newState.vacations[deleteFollowIndex].isFollowing=0;\n    //     break;\n  }\n\n  return newState;\n}\n\n// 5. Store - manager object from Redux library which handles the entire operation:\n// export const vacationsStore = createStore(vacationsReducer, composeWithDevTools()); // Development\nexport const vacationsStore = createStore(vacationsReducer);","map":{"version":3,"names":["createStore","VacationsState","vacations","VacationsActionType","vacationsReducer","currentState","action","newState","type","FetchVacations","payload","AddVacation","push","UpdateVacation","indexToUpdate","findIndex","v","vacationId","id","DeleteVacation","indexToDelete","splice","EmptyStore","AddFollower","addFollowerIndex","followersCount","DeleteFollower","deleteFollowerIndex","vacationsStore"],"sources":["/Users/raniradzewsky/Library/Mobile Documents/com~apple~CloudDocs/Documents/school/John Bryce/John Bryce Projects/Project 3/Vacations Project 5.0/Frontend/src/Redux/VacationsState.ts"],"sourcesContent":["// Global State for all vacations\r\n\r\nimport { createStore } from \"redux\";\r\nimport VacationModel from \"../Models/VacationModel\";\r\n\r\n// 1. Global State - the global data:\r\nexport class VacationsState {\r\n    public vacations: VacationModel[] = [];\r\n}\r\n\r\n// 2. Action Type - a list of operations we can perform on the data:\r\nexport enum VacationsActionType {\r\n    FetchVacations = \"FetchVacations\",\r\n    AddVacation = \"AddVacation\",\r\n    UpdateVacation = \"UpdateVacation\",\r\n    DeleteVacation = \"DeleteVacation\",\r\n    EmptyStore = \"EmptyStore\",\r\n    AddFollower = \"AddFollower\",\r\n    DeleteFollower = \"DeleteFollower\",\r\n    isNowFollowing = \"isNowFollowing\",\r\n    isNotFollowing = \"isNotFollowing\"\r\n}\r\n\r\n// 3. Action - A single object which dispatch sends to Redux for some change:\r\nexport interface VacationsAction {\r\n    type: VacationsActionType;\r\n    payload: any;\r\n}\r\n\r\n// 4. Reducer - a function which will be invoked when calling dispatch to perform the operation\r\nexport function vacationsReducer(currentState = new VacationsState(), action: VacationsAction): VacationsState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n\r\n        case VacationsActionType.FetchVacations: // Here the payload is a list of vacations (vacationModel[])\r\n            newState.vacations = action.payload;\r\n            break;\r\n\r\n        case VacationsActionType.AddVacation: // Here the payload is a vacation to add (vacationModel)\r\n            newState.vacations.push(action.payload);\r\n            break;\r\n\r\n        case VacationsActionType.UpdateVacation: // Here the payload is a vacation to update (vacationModel)\r\n            const indexToUpdate = newState.vacations.findIndex(v => v.vacationId === action.payload.id);\r\n            if(indexToUpdate >= 0) {\r\n                newState.vacations[indexToUpdate] = action.payload;\r\n            }\r\n            break;\r\n\r\n        case VacationsActionType.DeleteVacation: // Here the payload is the id of the vacation to delete (number)\r\n            const indexToDelete = newState.vacations.findIndex(v => v.vacationId === action.payload);\r\n            if(indexToDelete >= 0) {\r\n                newState.vacations.splice(indexToDelete, 1);\r\n            }\r\n            break;\r\n        case VacationsActionType.EmptyStore:\r\n            newState.vacations=action.payload;\r\n            break;\r\n            \r\n        case VacationsActionType.AddFollower:\r\n            const addFollowerIndex = newState.vacations.findIndex(v => v.vacationId === action.payload.vacationId);\r\n            newState.vacations[addFollowerIndex].followersCount++;\r\n            break;\r\n\r\n        case VacationsActionType.DeleteFollower:\r\n            const deleteFollowerIndex = newState.vacations.findIndex(v => v.vacationId === action.payload.vacationId);\r\n            newState.vacations[deleteFollowerIndex].followersCount--;\r\n            break;\r\n            \r\n        // case VacationsActionType.isNowFollowing:\r\n        //     const addFollowIndex = newState.vacations.findIndex(v => v.vacationId === action.payload);\r\n        //     newState.vacations[addFollowIndex].isFollowing=1;\r\n        //     break;\r\n\r\n        // case VacationsActionType.isNotFollowing:\r\n        //     const deleteFollowIndex = newState.vacations.findIndex(v => v.vacationId === action.payload);\r\n        //     newState.vacations[deleteFollowIndex].isFollowing=0;\r\n        //     break;\r\n\r\n\r\n    }\r\n\r\n    return newState;\r\n}\r\n\r\n// 5. Store - manager object from Redux library which handles the entire operation:\r\n// export const vacationsStore = createStore(vacationsReducer, composeWithDevTools()); // Development\r\nexport const vacationsStore = createStore(vacationsReducer); \r\n"],"mappings":"AAAA;;AAEA,SAASA,WAAW,QAAQ,OAAO;AAGnC;AACA,OAAO,MAAMC,cAAc,CAAC;EAAA;IAAA,KACjBC,SAAS,GAAoB,EAAE;EAAA;AAC1C;;AAEA;AACA,WAAYC,mBAAmB;;AAY/B;AAAA,WAZYA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;AAAA,GAAnBA,mBAAmB,KAAnBA,mBAAmB;AAkB/B;AACA,OAAO,SAASC,gBAAgB,GAA+E;EAAA,IAA9EC,YAAY,uEAAG,IAAIJ,cAAc,EAAE;EAAA,IAAEK,MAAuB;EAEzF,MAAMC,QAAQ,GAAG;IAAE,GAAGF;EAAa,CAAC;EAEpC,QAAQC,MAAM,CAACE,IAAI;IAEf,KAAKL,mBAAmB,CAACM,cAAc;MAAE;MACrCF,QAAQ,CAACL,SAAS,GAAGI,MAAM,CAACI,OAAO;MACnC;IAEJ,KAAKP,mBAAmB,CAACQ,WAAW;MAAE;MAClCJ,QAAQ,CAACL,SAAS,CAACU,IAAI,CAACN,MAAM,CAACI,OAAO,CAAC;MACvC;IAEJ,KAAKP,mBAAmB,CAACU,cAAc;MAAE;MACrC,MAAMC,aAAa,GAAGP,QAAQ,CAACL,SAAS,CAACa,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,KAAKX,MAAM,CAACI,OAAO,CAACQ,EAAE,CAAC;MAC3F,IAAGJ,aAAa,IAAI,CAAC,EAAE;QACnBP,QAAQ,CAACL,SAAS,CAACY,aAAa,CAAC,GAAGR,MAAM,CAACI,OAAO;MACtD;MACA;IAEJ,KAAKP,mBAAmB,CAACgB,cAAc;MAAE;MACrC,MAAMC,aAAa,GAAGb,QAAQ,CAACL,SAAS,CAACa,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,KAAKX,MAAM,CAACI,OAAO,CAAC;MACxF,IAAGU,aAAa,IAAI,CAAC,EAAE;QACnBb,QAAQ,CAACL,SAAS,CAACmB,MAAM,CAACD,aAAa,EAAE,CAAC,CAAC;MAC/C;MACA;IACJ,KAAKjB,mBAAmB,CAACmB,UAAU;MAC/Bf,QAAQ,CAACL,SAAS,GAACI,MAAM,CAACI,OAAO;MACjC;IAEJ,KAAKP,mBAAmB,CAACoB,WAAW;MAChC,MAAMC,gBAAgB,GAAGjB,QAAQ,CAACL,SAAS,CAACa,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,KAAKX,MAAM,CAACI,OAAO,CAACO,UAAU,CAAC;MACtGV,QAAQ,CAACL,SAAS,CAACsB,gBAAgB,CAAC,CAACC,cAAc,EAAE;MACrD;IAEJ,KAAKtB,mBAAmB,CAACuB,cAAc;MACnC,MAAMC,mBAAmB,GAAGpB,QAAQ,CAACL,SAAS,CAACa,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,KAAKX,MAAM,CAACI,OAAO,CAACO,UAAU,CAAC;MACzGV,QAAQ,CAACL,SAAS,CAACyB,mBAAmB,CAAC,CAACF,cAAc,EAAE;MACxD;;IAEJ;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EAAA;;EAKJ,OAAOlB,QAAQ;AACnB;;AAEA;AACA;AACA,OAAO,MAAMqB,cAAc,GAAG5B,WAAW,CAACI,gBAAgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}