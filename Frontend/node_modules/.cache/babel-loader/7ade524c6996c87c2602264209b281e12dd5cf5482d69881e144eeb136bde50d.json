{"ast":null,"code":"import axios from 'axios';\nimport appConfig from '../Utils/Config';\nimport { AuthActionType, authStore } from '../Redux/AuthState';\nimport jwtDecode from \"jwt-decode\";\nclass AuthService {\n  async register(user) {\n    const response = await axios.post(appConfig.registerUrl, user);\n    const token = response.data;\n    authStore.dispatch({\n      type: AuthActionType.Register,\n      payload: token\n    });\n  }\n  async login(credentials) {\n    const response = await axios.post(appConfig.loginUrl, credentials);\n    const token = response.data;\n    authStore.dispatch({\n      type: AuthActionType.Login,\n      payload: token\n    });\n  }\n  logout() {\n    authStore.dispatch({\n      type: AuthActionType.Logout\n    });\n  }\n  isLoggedIn() {\n    return authStore.getState().token !== null;\n  }\n  async getOneUser(id) {\n    const response = await axios.get(appConfig.usersUrl + id);\n    const user = response.data;\n    return user;\n  }\n\n  // public async updateUser(user: UserModel): Promise<void> {\n  //     const response = await axios.patch<UserModel>(appConfig.usersUrl + user.id, user);\n  //     const updatedUser = response.data;\n  //     authStore.dispatch({ type: AuthActionType.Update, payload: updatedUser });\n  // }\n\n  async getUserIdFromToken() {\n    const token = authStore.getState().token;\n    if (!token) {\n      return 0;\n    }\n    ;\n    const decodedToken = await jwtDecode(token);\n    const userId = Promise.resolve(decodedToken.user.userId);\n    return userId;\n  }\n  async isAdmin() {\n    const userId = await this.getUserIdFromToken();\n    if (userId === 0) return false;\n    const user = this.getOneUser(userId);\n    const role = (await user).role;\n    if (role === \"Admin\") return true;\n    return false;\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","appConfig","AuthActionType","authStore","jwtDecode","AuthService","register","user","response","post","registerUrl","token","data","dispatch","type","Register","payload","login","credentials","loginUrl","Login","logout","Logout","isLoggedIn","getState","getOneUser","id","get","usersUrl","getUserIdFromToken","decodedToken","userId","Promise","resolve","isAdmin","role","authService"],"sources":["/Users/raniradzewsky/Library/Mobile Documents/com~apple~CloudDocs/Documents/school/John Bryce/John Bryce Projects/Project 3/Vacations Project 5.0/Frontend/src/Services/AuthService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport appConfig from '../Utils/Config';\r\nimport { AuthActionType, authStore } from '../Redux/AuthState';\r\nimport UserModel from \"../Models/UserModel\";\r\nimport CredentialsModel from '../Models/CredentialsModel';\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { resolve } from 'path';\r\n\r\nclass AuthService {\r\n\r\n    public async register(user: UserModel): Promise<void> {\r\n        \r\n        const response = await axios.post<string>(appConfig.registerUrl, user);\r\n\r\n        const token = response.data;\r\n        authStore.dispatch({ type: AuthActionType.Register, payload: token });\r\n    }\r\n\r\n    public async login(credentials: CredentialsModel): Promise<void> {\r\n        const response = await axios.post<string>(appConfig.loginUrl, credentials);\r\n        const token = response.data;\r\n        authStore.dispatch({ type: AuthActionType.Login, payload: token });\r\n    }\r\n\r\n    public logout(): void {\r\n        authStore.dispatch({ type: AuthActionType.Logout });\r\n    }\r\n\r\n    public isLoggedIn(): boolean {\r\n        return authStore.getState().token !== null;\r\n    }\r\n\r\n    public async getOneUser(id: number): Promise<UserModel> {\r\n        const response = await axios.get<UserModel>(appConfig.usersUrl + id);\r\n        const user = response.data;\r\n        return user;\r\n    }\r\n\r\n    // public async updateUser(user: UserModel): Promise<void> {\r\n    //     const response = await axios.patch<UserModel>(appConfig.usersUrl + user.id, user);\r\n    //     const updatedUser = response.data;\r\n    //     authStore.dispatch({ type: AuthActionType.Update, payload: updatedUser });\r\n    // }\r\n\r\n    public async getUserIdFromToken(): Promise<number>{\r\n        const token = authStore.getState().token;\r\n        if(!token){return 0};\r\n        const decodedToken = await jwtDecode(token);\r\n        const userId = Promise.resolve((decodedToken as any).user.userId);\r\n        return userId;\r\n    }\r\n\r\n    public async isAdmin(): Promise<boolean>{    \r\n        const userId = await this.getUserIdFromToken();\r\n\r\n        if(userId===0) return false;\r\n        const user = this.getOneUser(userId);\r\n        const role = (await user).role;\r\n        if(role===\"Admin\") return true;\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nconst authService = new AuthService();\r\n\r\nexport default authService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,cAAc,EAAEC,SAAS,QAAQ,oBAAoB;AAG9D,OAAOC,SAAS,MAAM,YAAY;AAGlC,MAAMC,WAAW,CAAC;EAEd,MAAaC,QAAQ,CAACC,IAAe,EAAiB;IAElD,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAASR,SAAS,CAACS,WAAW,EAAEH,IAAI,CAAC;IAEtE,MAAMI,KAAK,GAAGH,QAAQ,CAACI,IAAI;IAC3BT,SAAS,CAACU,QAAQ,CAAC;MAAEC,IAAI,EAAEZ,cAAc,CAACa,QAAQ;MAAEC,OAAO,EAAEL;IAAM,CAAC,CAAC;EACzE;EAEA,MAAaM,KAAK,CAACC,WAA6B,EAAiB;IAC7D,MAAMV,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAASR,SAAS,CAACkB,QAAQ,EAAED,WAAW,CAAC;IAC1E,MAAMP,KAAK,GAAGH,QAAQ,CAACI,IAAI;IAC3BT,SAAS,CAACU,QAAQ,CAAC;MAAEC,IAAI,EAAEZ,cAAc,CAACkB,KAAK;MAAEJ,OAAO,EAAEL;IAAM,CAAC,CAAC;EACtE;EAEOU,MAAM,GAAS;IAClBlB,SAAS,CAACU,QAAQ,CAAC;MAAEC,IAAI,EAAEZ,cAAc,CAACoB;IAAO,CAAC,CAAC;EACvD;EAEOC,UAAU,GAAY;IACzB,OAAOpB,SAAS,CAACqB,QAAQ,EAAE,CAACb,KAAK,KAAK,IAAI;EAC9C;EAEA,MAAac,UAAU,CAACC,EAAU,EAAsB;IACpD,MAAMlB,QAAQ,GAAG,MAAMR,KAAK,CAAC2B,GAAG,CAAY1B,SAAS,CAAC2B,QAAQ,GAAGF,EAAE,CAAC;IACpE,MAAMnB,IAAI,GAAGC,QAAQ,CAACI,IAAI;IAC1B,OAAOL,IAAI;EACf;;EAEA;EACA;EACA;EACA;EACA;;EAEA,MAAasB,kBAAkB,GAAmB;IAC9C,MAAMlB,KAAK,GAAGR,SAAS,CAACqB,QAAQ,EAAE,CAACb,KAAK;IACxC,IAAG,CAACA,KAAK,EAAC;MAAC,OAAO,CAAC;IAAA;IAAC;IACpB,MAAMmB,YAAY,GAAG,MAAM1B,SAAS,CAACO,KAAK,CAAC;IAC3C,MAAMoB,MAAM,GAAGC,OAAO,CAACC,OAAO,CAAEH,YAAY,CAASvB,IAAI,CAACwB,MAAM,CAAC;IACjE,OAAOA,MAAM;EACjB;EAEA,MAAaG,OAAO,GAAoB;IACpC,MAAMH,MAAM,GAAG,MAAM,IAAI,CAACF,kBAAkB,EAAE;IAE9C,IAAGE,MAAM,KAAG,CAAC,EAAE,OAAO,KAAK;IAC3B,MAAMxB,IAAI,GAAG,IAAI,CAACkB,UAAU,CAACM,MAAM,CAAC;IACpC,MAAMI,IAAI,GAAG,CAAC,MAAM5B,IAAI,EAAE4B,IAAI;IAC9B,IAAGA,IAAI,KAAG,OAAO,EAAE,OAAO,IAAI;IAC9B,OAAO,KAAK;EAChB;AAEJ;AAEA,MAAMC,WAAW,GAAG,IAAI/B,WAAW,EAAE;AAErC,eAAe+B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}