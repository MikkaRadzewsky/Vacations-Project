{"ast":null,"code":"import axios from \"axios\";\nimport { authStore } from \"../Redux/AuthState\";\nclass InterceptorsService {\n  createInterceptors() {\n    axios.interceptors.request.use(request => {\n      // If we have a token:\n      if (authStore.getState().token) {\n        // Create JWT header with that token:\n        request.headers = {\n          authorization: \"Bearer \" + authStore.getState().token\n        };\n      }\n      return request;\n    });\n  }\n}\nconst interceptorsService = new InterceptorsService();\nexport default interceptorsService;","map":{"version":3,"names":["axios","authStore","InterceptorsService","createInterceptors","interceptors","request","use","getState","token","headers","authorization","interceptorsService"],"sources":["/Users/raniradzewsky/Library/Mobile Documents/com~apple~CloudDocs/Documents/school/John Bryce/John Bryce Projects/Project 3/Vacations Project 1.0/Frontend/src/Services/InterceptorsService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { authStore } from \"../Redux/AuthState\";\r\n\r\nclass InterceptorsService {\r\n\r\n    public createInterceptors(): void {\r\n        \r\n        axios.interceptors.request.use(request => {\r\n            \r\n            // If we have a token:\r\n            if(authStore.getState().token) {\r\n\r\n                // Create JWT header with that token:\r\n                request.headers = {\r\n                    authorization: \"Bearer \" + authStore.getState().token\r\n                };\r\n\r\n            }\r\n\r\n            return request;\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst interceptorsService = new InterceptorsService();\r\n\r\nexport default interceptorsService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,mBAAmB,CAAC;EAEfC,kBAAkB,GAAS;IAE9BH,KAAK,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACD,OAAO,IAAI;MAEtC;MACA,IAAGJ,SAAS,CAACM,QAAQ,EAAE,CAACC,KAAK,EAAE;QAE3B;QACAH,OAAO,CAACI,OAAO,GAAG;UACdC,aAAa,EAAE,SAAS,GAAGT,SAAS,CAACM,QAAQ,EAAE,CAACC;QACpD,CAAC;MAEL;MAEA,OAAOH,OAAO;IAElB,CAAC,CAAC;EACN;AAEJ;AAEA,MAAMM,mBAAmB,GAAG,IAAIT,mBAAmB,EAAE;AAErD,eAAeS,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}